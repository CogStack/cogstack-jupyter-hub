name: docker-jupyter-hub-all

on:
  push:
    branches: ['**']
    tags: ['v*.*.*']
  pull_request:
    branches: ['**']
  release:
    types: [published]
  workflow_dispatch:

concurrency:
  group: docker-jupyter-all-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        include:
          # Hub (multi-arch)
          - id: hub
            repo: cogstacksystems/jupyter-hub
            dockerfile: Dockerfile_hub
            context: .
            runner: ubuntu-22.04
            platform: linux/amd64
            gpu_build: "false"
          - id: hub
            repo: cogstacksystems/jupyter-hub
            dockerfile: Dockerfile_hub
            context: .
            runner: ubuntu-22.04-arm
            platform: linux/arm64
            gpu_build: "false"
          # Singleuser CPU (multi-arch)
          - id: singleuser-cpu
            repo: cogstacksystems/jupyter-singleuser
            dockerfile: Dockerfile_singleuser
            context: .
            runner: ubuntu-22.04
            platform: linux/amd64
            gpu_build: "false"
          - id: singleuser-cpu
            repo: cogstacksystems/jupyter-singleuser
            dockerfile: Dockerfile_singleuser
            context: .
            runner: ubuntu-22.04-arm
            platform: linux/arm64
            gpu_build: "false"
          # Singleuser GPU (amd64 only)
          - id: singleuser-gpu
            repo: cogstacksystems/jupyter-singleuser-gpu
            dockerfile: Dockerfile_singleuser
            context: .
            runner: ubuntu-22.04
            platform: linux/amd64
            gpu_build: "true"

    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.repo }}
          tags: |
            # Tags (vX.Y.Z) → strip "v" automatically
            type=semver,pattern={{version}},prefix=v
            type=semver,pattern={{major}}.{{minor}},prefix=v

            # Always push latest on tags and main
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') }}

            # Other branches → branch name
            type=ref,event=branch,enable=${{ github.event_name != 'pull_request' }}

            # Always add a short sha
            type=sha,format=short

      - uses: docker/login-action@v3
        if: ${{ github.event_name != 'pull_request' && github.actor != 'dependabot[bot]' }}
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build & push (native arch)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: ${{ matrix.platform }}
          build-args: |
            CPU_ARCHITECTURE=${{ startsWith(matrix.platform, 'linux/arm64') && 'arm64' || 'amd64' }}
            GPU_BUILD=${{ matrix.gpu_build }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.title=${{ matrix.id }}
          cache-from: type=gha,scope=${{ matrix.id }}-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=${{ matrix.id }}-${{ matrix.platform }}
          push: ${{ github.event_name != 'pull_request' }}

      - name: Save digests for this arch
        if: ${{ github.event_name != 'pull_request' }}
        shell: bash
        run: |
          set -euo pipefail
          arch="${{ matrix.platform == 'linux/arm64' && 'arm64' || 'amd64' }}"
          : > "digests-${{ matrix.id }}-${arch}.txt"
          while IFS= read -r ref; do
            [[ -z "$ref" ]] && continue
            echo "$ref ${{ steps.build.outputs.digest }}" >> "digests-${{ matrix.id }}-${arch}.txt"
          done < <(printf "%s" "${{ steps.meta.outputs.tags }}")

      - name: Upload digest artifact
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.id }}-${{ matrix.platform == 'linux/arm64' && 'arm64' || 'amd64' }}
          path: digests-${{ matrix.id }}-${{ matrix.platform == 'linux/arm64' && 'arm64' || 'amd64' }}.txt
  
  manifest:
    runs-on: ubuntu-22.04
    needs: build
    if: ${{ github.event_name != 'pull_request' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - id: hub
            repo: cogstacksystems/jupyter-hub
          - id: singleuser-cpu
            repo: cogstacksystems/jupyter-singleuser

    steps:
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.repo }}
          tags: |
            type=semver,pattern={{version}},prefix=v
            type=semver,pattern={{major}}.{{minor}},prefix=v
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') }}
            type=ref,event=branch,enable=${{ github.event_name != 'pull_request' }}
            type=sha,format=short

      - name: Download digest artifacts (amd64)
        uses: actions/download-artifact@v4
        with:
          name: digests-${{ matrix.id }}-amd64
          path: .
      - name: Download digest artifacts (arm64)
        uses: actions/download-artifact@v4
        with:
          name: digests-${{ matrix.id }}-arm64
          path: .

      - name: Create multi-arch manifests
        shell: bash
        run: |
          set -euo pipefail
          while IFS= read -r ref; do
            [[ -z "$ref" ]] && continue
            image="${ref%%:*}"
            tag="${ref#*:}"
            amd64_d=$(awk -v r="$ref" '$1==r{print $2}' digests-${{ matrix.id }}-amd64.txt)
            arm64_d=$(awk -v r="$ref" '$1==r{print $2}' digests-${{ matrix.id }}-arm64.txt)
            [[ -z "$amd64_d" || -z "$arm64_d" ]] && continue
            echo "⛵ $image:$tag"
            docker buildx imagetools create \
              --tag "$image:$tag" \
              "$image@${amd64_d}" \
              "$image@${arm64_d}"
          done < <(printf "%s" "${{ steps.meta.outputs.tags }}")
